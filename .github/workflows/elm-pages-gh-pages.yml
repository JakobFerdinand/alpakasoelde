# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy elm-pages with GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
      # Re-use node_modules between runs until package-lock.json changes.
      - name: Cache node_modules
        id: cache-node_modules
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/Cypress
            node_modules
          key: node_modules-node-v${{ matrix.node }}-1-${{ hashFiles('package-lock.json') }}
        
      
      # Re-use ~/.elm between runs until elm.json, elm-tooling.json or
      # review/elm.json changes. The Elm compiler saves downloaded Elm packages
      # to ~/.elm, and elm-tooling saves downloaded tool executables there.
      - name: Cache ~/.elm
        uses: actions/cache@v2
        with:
          path: ~/.elm
          key: elm-${{ hashFiles('elm.json', 'elm-tooling.json', 'generator/elm.json', 'review/elm.json', 'examples/routing/elm.json', 'examples/escaping/elm.json', 'examples/base-path/elm.json') }}
      - name: Download lamdera
        run: curl https://static.lamdera.com/bin/linux/lamdera-next-alpine-musl -o /usr/local/bin/lamdera && chmod a+x /usr/local/bin/lamdera
      
      # Install npm packages, unless we restored them from cache.
      # Since `npm ci` removes the node_modules folder before running it’s
      # important to skip this step if cache was restored.
      - name: npm ci
        if: steps.cache-node_modules.outputs.cache-hit != 'true'
        env:
          # If you have a `"postinstall": "elm-tooling install"` script in your
          # package.json, this turns it into a no-op. We’ll run it in the next
          # step because of the caching. If elm-tooling.json changes but
          # package-lock.json does not, the postinstall script needs running
          # but this step won’t.
          NO_ELM_TOOLING_INSTALL: 1
        run: npm ci
      - name: elm-tooling install
        run: npx --no-install elm-tooling install
      - name: Add elm-review, elm and elm-format to path
        run: realpath node_modules/.bin >> $GITHUB_PATH
      #- uses: sparksp/elm-review-action@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build elm-pages
        run: elm-pages build
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist/
        
  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
